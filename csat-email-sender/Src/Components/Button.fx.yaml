"Button As '6b659a0f66ab41ec8edca4438e98914f'":
    OnSelect():
        ThisProperty:
            Default: =true

    HtmlBtnShadow As htmlViewer:
        Height: =Button.Height
        HtmlText: |-
            ="<div 
                style='
                    position: absolute;
                    left: "&Substitute(Button.Margin-Button.BorderThickness*0.5, ",", ".")&"px;
                    top: "&Substitute(Button.Margin-Button.BorderThickness*0.5, ",", ".")&"px;
                    width: "&BtnOverlayBkg.Width+Button.BorderThickness&"px;
                    height: "&BtnOverlayBkg.Height+Button.BorderThickness&"px;
                    border-radius: "&Button.BorderRadius&"px;
                    box-shadow: 1px 1px 1px 2px rgba(0,0,0,0.25);
                    '
            >
            
            </div>
            
            "
        PaddingBottom: =0
        PaddingLeft: =0
        PaddingRight: =0
        PaddingTop: =0
        Visible: =Button.BoxShadow
        Width: =Button.Width
        ZIndex: =1

    BtnOverlayBkg As button:
        BorderColor: |-
            =If(
                Button.DisplayMode = DisplayMode.Disabled,
                ColorValue(Button.DisabledColor),
                ColorValue(Button.ButtonColor)
            )
        BorderThickness: =Button.BorderThickness
        Color: |-
            =With(
                {
                    FillColor: If(
                        Button.DisplayMode = DisplayMode.Disabled,
                        ColorValue(Button.DisabledColor),
                        ColorValue(Button.ButtonColor)
                    )
                },
                If(
                    Button.Outlined,
                    FillColor,
                    ColorValue(Button.TextColor)
                )
            )
        DisabledBorderColor: =RGBA(166, 166, 166, 1)
        DisabledColor: =RGBA(166, 166, 166, 1)
        DisabledFill: =RGBA(244, 244, 244, 1)
        Fill: |-
            =With(
                {
                    FillColor: If(
                        Button.DisplayMode = DisplayMode.Disabled,
                        ColorValue(Button.DisabledColor),
                        ColorValue(Button.ButtonColor)
                    )
                },
                If(
                    Button.Outlined,
                    ColorValue(Button.TextColor),
                    FillColor
                )
            )
        FocusedBorderColor: =ColorFade(BtnOverlayBkg.Fill, -30%)
        FocusedBorderThickness: =Button.BorderThickness * 1.5
        Font: =Button.Font
        FontWeight: =Button.FontWeight
        Height: =Button.Height - 2 * Button.Margin
        HoverColor: =RGBA(255, 255, 255, 1)
        HoverFill: =Self.Fill
        PaddingBottom: =0
        PaddingLeft: =0
        PaddingRight: =0
        PaddingTop: =0
        RadiusBottomLeft: =Button.BorderRadius
        RadiusBottomRight: =Button.BorderRadius
        RadiusTopLeft: =Button.BorderRadius
        RadiusTopRight: =Button.BorderRadius
        Size: =Button.FontSize
        TabIndex: =-1
        Text: =""
        Width: =Button.Width - 2 * Button.Margin
        X: =Button.Margin
        Y: =Button.Margin
        ZIndex: =2

    BtnBaseContainer As groupContainer.horizontalAutoLayoutContainer:
        Height: =BtnOverlayBkg.Height
        LayoutAlignItems: =LayoutAlignItems.Center
        LayoutGap: =If(Len(Button.Icon) > 0 && LblBtnText.Visible, 8, 0)
        LayoutJustifyContent: =Button.Align
        LayoutMode: =LayoutMode.Auto
        Width: =BtnOverlayBkg.Width
        X: =BtnOverlayBkg.X + If(Button.IsRTL, Button.PaddingRight, Button.PaddingLeft)
        Y: =BtnOverlayBkg.Y
        ZIndex: =3

        LblBtnText As label:
            Align: |-
                =With(
                    {
                        Alignment: If(
                            Button.IsRTL,
                            Align.Left,
                            Align.Right
                        )
                    },
                    If(
                        Len(Button.Icon) > 0,
                        Alignment,
                        Align.Center
                    )
                ) 
            BorderColor: =RGBA(0, 18, 107, 1)
            Color: |-
                =With(
                    {
                        TextColor: If(
                            Button.DisplayMode = DisplayMode.Disabled,
                            ColorValue(Button.DisabledColor),
                            ColorValue(Button.ButtonColor)
                        )
                    },
                    If(
                        Button.Outlined,
                        TextColor,
                        ColorValue(Button.TextColor)
                    )
                )
            DisabledColor: =RGBA(166, 166, 166, 1)
            Font: =Button.Font
            FontWeight: =Button.FontWeight
            Height: =Parent.Height
            LayoutMinHeight: =20
            LayoutMinWidth: =560
            LineHeight: =1
            PaddingBottom: =0
            PaddingLeft: =0
            PaddingRight: =0
            PaddingTop: =0
            Size: =Button.FontSize
            Text: =Button.Text
            Visible: =Len(Self.Text) > 0
            Width: =HtmlTextWidth.Height + 10
            X: =20
            Y: =20
            ZIndex: =1

        ImgBtnLeftIcon As image:
            BorderColor: =RGBA(0, 18, 107, 1)
            DisabledBorderColor: =RGBA(166, 166, 166, 1)
            DisabledFill: =RGBA(244, 244, 244, 1)
            Height: =Parent.Height
            Image: |-
                =With(
                    {
                        IconFill: If(
                            Not(Button.Outlined),
                            Button.TextColor,
                            Button.DisplayMode = DisplayMode.Disabled,
                            Button.DisabledColor,
                            Button.ButtonColor
                        )
                    },
                    "data:image/svg+xml;utf8, " & EncodeUrl(
                        Substitute(
                            Button.Icon,
                            "<svg ",
                            "<svg fill='" & IconFill & "' "
                        )
                    )
                )
            LayoutMinHeight: =320
            LayoutMinWidth: =320
            PaddingLeft: =If(HtmlTextWidth.Visible, 10, 0)
            PaddingRight: =If(HtmlTextWidth.Visible, 10, 0)
            Visible: =Len(Button.Icon) > 0
            Width: =Button.IconSize + If(Button.IsRTL, Self.PaddingLeft, Self.PaddingRight)
            X: =
            Y: =20
            ZIndex: =2

    BtnBase As button:
        BorderStyle: |-
            =If(
                Button.DisplayMode = DisplayMode.Disabled,
                BorderStyle.None,
                BorderStyle.Solid
            )
        BorderThickness: =Button.BorderThickness
        Color: =Color.Transparent
        DisabledBorderColor: =RGBA(166, 166, 166, 1)
        DisabledColor: =Color.Transparent
        DisabledFill: =Color.Transparent
        DisplayMode: =Button.DisplayMode
        Fill: =Color.Transparent
        FocusedBorderColor: =ColorFade(BtnOverlayBkg.BorderColor, -30%)
        FocusedBorderThickness: =Max(5, Button.BorderThickness)
        Font: ="Roboto"
        FontWeight: =FontWeight.Semibold
        Height: =Button.Height - 2 * Button.Margin
        HoverColor: =Color.Transparent
        HoverFill: =RGBA(0, 0, 0, 0.2)
        OnSelect: =Button.OnSelect()
        PaddingBottom: =0
        PaddingLeft: =0
        PaddingRight: =0
        PaddingTop: =0
        PressedColor: =Color.Transparent
        PressedFill: =RGBA(0, 0, 0, 0.5)
        RadiusBottomLeft: =Button.BorderRadius
        RadiusBottomRight: =Button.BorderRadius
        RadiusTopLeft: =Button.BorderRadius
        RadiusTopRight: =Button.BorderRadius
        Size: =14
        Text: =""
        Width: =Button.Width - 2 * Button.Margin
        X: =Button.Margin
        Y: =Button.Margin
        ZIndex: =4

    HtmlTextWidth As htmlViewer:
        AutoHeight: =true
        Fill: =Color.Transparent
        Font: =Button.Font
        HtmlText: |-
            ="<div style='"&
                "white-space: nowrap;"& 
                "transform: rotate(90deg);
                font-size: 1em;
                font-weight: "& Button.FontWeight &";
                padding: 0px;
                margin: 0px"&
            "'>"& Button.Text &"</div>"
        PaddingBottom: =0
        PaddingLeft: =0
        PaddingRight: =0
        PaddingTop: =0
        Size: =Button.FontSize
        Width: =Self.Size
        Y: =Parent.Height
        ZIndex: =5

